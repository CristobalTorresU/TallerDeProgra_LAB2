View(datos_1)
datos_2 = datos[datos$n.nodos >= 60,]
set.seed(33);
datos_2 = datos_2[sample(nrow(datos_2), 20),];
datos_2 = datos_2 %>% pivot_longer(c("mejor.B", "mejor.C"), names_to = "algoritmo", values_to = "mejor")
datos_2$mejor = as.numeric(datos_2$mejor)
B = datos_2[datos_2$algoritmo == "mejor.B",]
C = datos_2[datos_2$algoritmo == "mejor.C",]
ggplot(datos_2, aes(x=algoritmo, y=mejor)) +
geom_boxplot(fill="darkgreen", alpha=0.5) +
xlab("algoritmo")
wilcox.test(B$mejor, C$mejor, paired=TRUE)
cont_iguales = 0
for(i in 1:20){
if(B$mejor[i] == C$mejor[i]){
cont_iguales = cont_iguales + 1
}
}
print(cont_iguales/20.0 * 100.0)
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(dplyr)
library(ggplot2)
datos = read.csv2("EP07 Datos.csv", sep=",");
datos_2 = datos[datos$n.nodos >= 60,]
set.seed(33);
datos_2 = datos_2[sample(nrow(datos_2), 20),];
datos_2 = datos_2 %>% pivot_longer(c("mejor.B", "mejor.C"), names_to = "algoritmo", values_to = "mejor")
datos_2$mejor = as.numeric(datos_2$mejor)
B = datos_2[datos_2$algoritmo == "mejor.B",]
C = datos_2[datos_2$algoritmo == "mejor.C",]
ggplot(datos_2, aes(x=algoritmo, y=mejor)) +
geom_boxplot(fill="darkgreen", alpha=0.5) +
xlab("algoritmo")
datos_1 = datos[datos$n.nodos >= 60,]
set.seed(71)
datos_1 = datos_1 %>% pivot_longer(c("mejor.B", "mejor.C"), names_to = "algoritmo", values_to = "mejor")
#datos_1 = datos_1[sample(nrow(datos_1), 22 + 19), ]
#B = datos_1[1:22,]
#C = datos_1[23:41,]
#datos_1 = rbind(
#  data.frame(algoritmo = 'B', tiempo = B$tiempo.B),
#  data.frame(algoritmo = 'C', tiempo = C$tiempo.C)
#)
#ggplot(datos_1, aes(x=algoritmo, y=tiempo)) +
#  geom_boxplot(fill="darkgreen", alpha=0.5) +
#  xlab("algoritmo")
View(datos_1)
datos_3 = datos[datos$n.nodos >= 60,]
set.seed(31)
datos_3 = datos_3[sample(nrow(datos_3), 15 + 14 + 13), ]
A = datos_3[1:15,]
B = datos_3[16:29,]
C = datos_3[30:42,]
datos_3 = rbind(
data.frame(algoritmo = 'A', tiempo = A$tiempo.A),
data.frame(algoritmo = 'B', tiempo = B$tiempo.B),
data.frame(algoritmo = 'C', tiempo = C$tiempo.C)
)
ggplot(datos_3, aes(x=algoritmo, y=tiempo)) +
geom_boxplot(fill="darkgreen", alpha=0.5) +
xlab("algoritmo")
help("sample")
help("shapiro.test")
print(shapiro.test(B$tiempo));
datos_3 = datos[datos$n.nodos >= 60,]
set.seed(31)
datos_3 = datos_3[sample(nrow(datos_3), 15 + 14 + 13), ]
A = datos_3[1:15,]
B = datos_3[16:29,]
C = datos_3[30:42,]
datos_3 = rbind(
data.frame(algoritmo = 'A', tiempo = A$tiempo.A),
data.frame(algoritmo = 'B', tiempo = B$tiempo.B),
data.frame(algoritmo = 'C', tiempo = C$tiempo.C)
)
ggplot(datos_3, aes(x=algoritmo, y=tiempo)) +
geom_boxplot(fill="darkgreen", alpha=0.5) +
xlab("algoritmo")
View(datos_3)
help("kruskal.test")
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(dplyr)
library(ggplot2)
datos = read.csv2("EP07 Datos.csv", sep=",");
datos = filter(datos, n.nodos >= 60) # Se filtran los datos para tener instancias con 60 o mas nodos
set.seed(71) # Se establece una semilla correspondiente
# Se muestrean los datos, asegurandonos de tener 22 instancias
# de tiempos para el algoritmo B y 19 instancias distintas para
# el algortimo C
datos = datos[sample(nrow(datos), 22 + 19), ]
datos_B = datos[1:22,]
datos_C = datos[23:41,]
# Se pivotean los datos en base a lo pedido
datos_B = datos_B %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo"
, values_to = "tiempo")
datos_C = datos_C %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo"
, values_to = "tiempo")
datos_B = filter(datos_B, Algoritmo == "tiempo.B")
datos_C = filter(datos_C, Algoritmo == "tiempo.C")
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(dplyr)
library(ggplot2)
datos = read.csv2("EP07 Datos.csv", sep=",");
datos = filter(datos, n.nodos >= 60) # Se filtran los datos para tener instancias con 60 o mas nodos
set.seed(71) # Se establece una semilla correspondiente
# Se muestrean los datos, asegurandonos de tener 22 instancias
# de tiempos para el algoritmo B y 19 instancias distintas para
# el algortimo C
datos = datos[sample(nrow(datos), 22 + 19), ]
datos_B = datos[1:22,]
datos_C = datos[23:41,]
# Se pivotean los datos en base a lo pedido
datos_B = datos_B %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo"
, values_to = "tiempo")
datos_C = datos_C %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo"
, values_to = "tiempo")
datos_B = filter(datos_B, Algoritmo == "tiempo.B")
datos_C = filter(datos_C, Algoritmo == "tiempo.C")
print(shapiro.test(datos_B$tiempo));
print(shapiro.test(datos_C$tiempo));
wilcox.test(datos_B$tiempo, datos_C$tiempo, alternative = "two.sided")
datos = filter(datos, n.nodos >= 60) # Se filtran los datos para tener instancias con 60 o mas nodos
set.seed(71) # Se establece una semilla correspondiente
# Se muestrean los datos, asegurandonos de tener 22 instancias
# de tiempos para el algoritmo B y 19 instancias distintas para
# el algortimo C
datos = datos[sample(nrow(datos), 22 + 19), ]
datos_B = datos[1:22,]
datos_C = datos[23:41,]
# Se pivotean los datos en base a lo pedido
datos_B = datos_B %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo"
, values_to = "tiempo")
datos_C = datos_C %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo"
, values_to = "tiempo")
datos_B = filter(datos_B, Algoritmo == "tiempo.B")
datos_C = filter(datos_C, Algoritmo == "tiempo.C")
print(shapiro.test(datos_B$tiempo));
print(shapiro.test(datos_C$tiempo));
wilcox.test(datos_B$tiempo, datos_C$tiempo, alternative = "two.sided")
print(shapiro.test(datos_B$tiempo));
print(shapiro.test(datos_C$tiempo));
print(shapiro.test(datos_B$tiempo));
print(shapiro.test(datos_C$tiempo));
datos = filter(datos, n.nodos >= 60) # Se filtran los datos para tener instancias con 60 o mas nodos
set.seed(71) # Se establece una semilla correspondiente
# Se muestrean los datos, asegurandonos de tener 22 instancias
# de tiempos para el algoritmo B y 19 instancias distintas para
# el algortimo C
datos = datos[sample(nrow(datos), 22 + 19), ]
datos_B = datos[1:22,]
datos_C = datos[23:41,]
# Se pivotean los datos en base a lo pedido
datos_B = datos_B %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo"
, values_to = "tiempo")
datos_C = datos_C %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo"
, values_to = "tiempo")
datos_B = filter(datos_B, Algoritmo == "tiempo.B")
datos_C = filter(datos_C, Algoritmo == "tiempo.C")
print(shapiro.test(datos_B$tiempo));
print(shapiro.test(datos_C$tiempo));
datos_3 = datos[datos$n.nodos >= 60,] # Se filtran los datos para tener instancias con 60 o mas nodos
set.seed(31)
datos_3 = datos_3[sample(nrow(datos_3), 15 + 14 + 13), ]
datos = read.csv2("EP07 Datos.csv", sep=",");
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(dplyr)
library(ggplot2)
datos = read.csv2("EP07 Datos.csv", sep=",");
datos = filter(datos, n.nodos >= 60) # Se filtran los datos para tener instancias con 60 o mas nodos
set.seed(71) # Se establece una semilla correspondiente
# Se muestrean los datos, asegurandonos de tener 22 instancias
# de tiempos para el algoritmo B y 19 instancias distintas para
# el algortimo C
datos = datos[sample(nrow(datos), 22 + 19), ]
datos_B = datos[1:22,]
datos_C = datos[23:41,]
# Se pivotean los datos en base a lo pedido
datos_B = datos_B %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo"
, values_to = "tiempo")
datos_C = datos_C %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo"
, values_to = "tiempo")
datos_B = filter(datos_B, Algoritmo == "tiempo.B")
datos_C = filter(datos_C, Algoritmo == "tiempo.C")
print(shapiro.test(datos_B$tiempo));
print(shapiro.test(datos_C$tiempo));
datos_2 = datos[datos$n.nodos >= 60,]
set.seed(33);
datos_2 = datos_2[sample(nrow(datos_2), 20),];
datos_2 = datos_2 %>% pivot_longer(c("mejor.B", "mejor.C"), names_to = "algoritmo", values_to = "mejor")
datos_2$mejor = as.numeric(datos_2$mejor)
B = datos_2[datos_2$algoritmo == "mejor.B",]
C = datos_2[datos_2$algoritmo == "mejor.C",]
ggplot(datos_2, aes(x=algoritmo, y=mejor)) +
geom_boxplot(fill="darkgreen", alpha=0.5) +
xlab("algoritmo")
wilcox.test(B$mejor, C$mejor, paired=TRUE)
cont_iguales = 0
for(i in 1:20){
if(B$mejor[i] == C$mejor[i]){
cont_iguales = cont_iguales + 1
}
}
print(cont_iguales/20.0 * 100.0)
datos_3 = datos[datos$n.nodos >= 60,] # Se filtran los datos para tener instancias con 60 o mas nodos
set.seed(31)
datos_3 = datos_3[sample(nrow(datos_3), 15 + 14 + 13), ]
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(dplyr)
library(ggplot2)
datos = read.csv2("EP07 Datos.csv", sep=",");
datos_3 = datos[datos$n.nodos >= 60,] # Se filtran los datos para tener instancias con 60 o mas nodos
set.seed(31)
datos_3 = datos_3[sample(nrow(datos_3), 15 + 14 + 13), ]
A = datos_3[1:15,]
B = datos_3[16:29,]
C = datos_3[30:42,]
# Se pivotean los datos en base a lo pedido
A = A %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo", values_to = "tiempo")
B = B %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo", values_to = "tiempo")
C = C %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo", values_to = "tiempo")
A = filter(A, Algoritmo == "tiempo.A")
B = filter(B, Algoritmo == "tiempo.B")
C = filter(C, Algoritmo == "tiempo.C")
datos_3 = bind_rows(A, B, C)
print(shapiro.test(A$tiempo))
print(shapiro.test(B$tiempo))
print(shapiro.test(C$tiempo))
kruskal.test(tiempo ~ Algoritmo, datos_3)
post_hoc <- pairwise.wilcox.test(datos_3$tiempo, datos_3$Algoritmo,
p.adjust.method = "holm", paired = FALSE)
print(post_hoc)
datos = filter(datos, n.nodos >= 60) # Se filtran los datos para tener instancias con 60 o mas nodos
set.seed(71) # Se establece una semilla correspondiente
# Se muestrean los datos, asegurandonos de tener 22 instancias
# de tiempos para el algoritmo B y 19 instancias distintas para
# el algortimo C
datos = datos[sample(nrow(datos), 22 + 19), ]
datos_B = datos[1:22,]
datos_C = datos[23:41,]
# Se pivotean los datos en base a lo pedido
datos_B = datos_B %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo"
, values_to = "tiempo")
datos_C = datos_C %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo"
, values_to = "tiempo")
datos_B = filter(datos_B, Algoritmo == "tiempo.B")
datos_C = filter(datos_C, Algoritmo == "tiempo.C")
datos = filter(datos, n.nodos >= 60) # Se filtran los datos para tener instancias con 60 o mas nodos
set.seed(71) # Se establece una semilla correspondiente
# Se muestrean los datos, asegurandonos de tener 22 instancias
# de tiempos para el algoritmo B y 19 instancias distintas para
# el algortimo C
datos = datos[sample(nrow(datos), 22 + 19), ]
datos_B = datos[1:22,]
datos_C = datos[23:41,]
# Se pivotean los datos en base a lo pedido
datos_B = datos_B %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo"
, values_to = "tiempo")
datos_C = datos_C %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo"
, values_to = "tiempo")
datos_B = filter(datos_B, Algoritmo == "tiempo.B")
datos_C = filter(datos_C, Algoritmo == "tiempo.C")
datos = filter(datos, n.nodos >= 60) # Se filtran los datos para tener instancias con 60 o mas nodos
set.seed(71) # Se establece una semilla correspondiente
# Se muestrean los datos, asegurandonos de tener 22 instancias
# de tiempos para el algoritmo B y 19 instancias distintas para
# el algortimo C
datos = datos[sample(nrow(datos), 22 + 19), ]
datos_B = datos[1:22,]
datos_C = datos[23:41,]
# Se pivotean los datos en base a lo pedido
datos_B = datos_B %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo"
, values_to = "tiempo")
datos_C = datos_C %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo"
, values_to = "tiempo")
datos_B = filter(datos_B, Algoritmo == "tiempo.B")
datos_C = filter(datos_C, Algoritmo == "tiempo.C")
datos = filter(datos, n.nodos >= 60) # Se filtran los datos para tener instancias con 60 o mas nodos
set.seed(71) # Se establece una semilla correspondiente
# Se muestrean los datos, asegurandonos de tener 22 instancias
# de tiempos para el algoritmo B y 19 instancias distintas para
# el algortimo C
datos = datos[sample(nrow(datos), 22 + 19), ]
datos_B = datos[1:22,]
datos_C = datos[23:41,]
# Se pivotean los datos en base a lo pedido
datos_B = datos_B %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo"
, values_to = "tiempo")
datos_C = datos_C %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo"
, values_to = "tiempo")
datos_B = filter(datos_B, Algoritmo == "tiempo.B")
datos_C = filter(datos_C, Algoritmo == "tiempo.C")
datos = filter(datos, n.nodos >= 60) # Se filtran los datos para tener instancias con 60 o mas nodos
set.seed(71) # Se establece una semilla correspondiente
# Se muestrean los datos, asegurandonos de tener 22 instancias
# de tiempos para el algoritmo B y 19 instancias distintas para
# el algortimo C
datos = datos[sample(nrow(datos), 22 + 19), ]
datos_B = datos[1:22,]
datos_C = datos[23:41,]
# Se pivotean los datos en base a lo pedido
datos_B = datos_B %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo"
, values_to = "tiempo")
datos_C = datos_C %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo"
, values_to = "tiempo")
datos_B = filter(datos_B, Algoritmo == "tiempo.B")
datos_C = filter(datos_C, Algoritmo == "tiempo.C")
datos = filter(datos, n.nodos >= 60) # Se filtran los datos para tener instancias con 60 o mas nodos
set.seed(71) # Se establece una semilla correspondiente
# Se muestrean los datos, asegurandonos de tener 22 instancias
# de tiempos para el algoritmo B y 19 instancias distintas para
# el algortimo C
datos = datos[sample(nrow(datos), 22 + 19), ]
datos_B = datos[1:22,]
datos_C = datos[23:41,]
# Se pivotean los datos en base a lo pedido
datos_B = datos_B %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo"
, values_to = "tiempo")
datos_C = datos_C %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo"
, values_to = "tiempo")
datos_B = filter(datos_B, Algoritmo == "tiempo.B")
datos_C = filter(datos_C, Algoritmo == "tiempo.C")
datos = filter(datos, n.nodos >= 60) # Se filtran los datos para tener instancias con 60 o mas nodos
set.seed(71) # Se establece una semilla correspondiente
# Se muestrean los datos, asegurandonos de tener 22 instancias
# de tiempos para el algoritmo B y 19 instancias distintas para
# el algortimo C
datos = datos[sample(nrow(datos), 22 + 19), ]
datos_B = datos[1:22,]
datos_C = datos[23:41,]
# Se pivotean los datos en base a lo pedido
datos_B = datos_B %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo"
, values_to = "tiempo")
datos_C = datos_C %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo"
, values_to = "tiempo")
datos_B = filter(datos_B, Algoritmo == "tiempo.B")
datos_C = filter(datos_C, Algoritmo == "tiempo.C")
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(dplyr)
library(ggplot2)
datos = read.csv2("EP07 Datos.csv", sep=",");
datos = filter(datos, n.nodos >= 60) # Se filtran los datos para tener instancias con 60 o mas nodos
set.seed(71) # Se establece una semilla correspondiente
# Se muestrean los datos, asegurandonos de tener 22 instancias
# de tiempos para el algoritmo B y 19 instancias distintas para
# el algortimo C
datos_1 = datos[sample(nrow(datos), 22 + 19), ]
datos_B = datos_1[1:22,]
datos_C = datos_1[23:41,]
# Se pivotean los datos en base a lo pedido
datos_B = datos_B %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo"
, values_to = "tiempo")
datos_C = datos_C %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo"
, values_to = "tiempo")
datos_B = filter(datos_B, Algoritmo == "tiempo.B")
datos_C = filter(datos_C, Algoritmo == "tiempo.C")
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(dplyr)
library(ggplot2)
datos = read.csv2("EP07 Datos.csv", sep=",");
datos_1 = filter(datos, n.nodos >= 60) # Se filtran los datos para tener instancias con 60 o mas nodos
set.seed(71) # Se establece una semilla correspondiente
# Se muestrean los datos, asegurandonos de tener 22 instancias
# de tiempos para el algoritmo B y 19 instancias distintas para
# el algortimo C
datos_1 = datos[sample(nrow(datos), 22 + 19), ]
datos_B = datos_1[1:22,]
datos_C = datos_1[23:41,]
# Se pivotean los datos en base a lo pedido
datos_B = datos_B %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo"
, values_to = "tiempo")
datos_C = datos_C %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo"
, values_to = "tiempo")
datos_B = filter(datos_B, Algoritmo == "tiempo.B")
datos_C = filter(datos_C, Algoritmo == "tiempo.C")
print(shapiro.test(datos_B$tiempo));
print(shapiro.test(datos_C$tiempo));
wilcox.test(datos_B$tiempo, datos_C$tiempo, alternative = "two.sided")
datos_2 = datos[datos$n.nodos >= 60,]
set.seed(33);
datos_2 = datos_2[sample(nrow(datos_2), 20),];
datos_2 = datos_2 %>% pivot_longer(c("mejor.B", "mejor.C"), names_to = "algoritmo", values_to = "mejor")
datos_2$mejor = as.numeric(datos_2$mejor)
B = datos_2[datos_2$algoritmo == "mejor.B",]
C = datos_2[datos_2$algoritmo == "mejor.C",]
ggplot(datos_2, aes(x=algoritmo, y=mejor)) +
geom_boxplot(fill="darkgreen", alpha=0.5) +
xlab("algoritmo")
wilcox.test(B$mejor, C$mejor, paired=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(dplyr)
library(ggplot2)
datos = read.csv2("EP07 Datos.csv", sep=",");
datos_3 = datos[datos$n.nodos >= 60,] # Se filtran los datos para tener instancias con 60 o mas nodos
set.seed(31)
datos_3 = datos_3[sample(nrow(datos_3), 15 + 14 + 13), ]
A = datos_3[1:15,]
B = datos_3[16:29,]
C = datos_3[30:42,]
# Se pivotean los datos en base a lo pedido
A = A %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo", values_to = "tiempo")
B = B %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo", values_to = "tiempo")
C = C %>% pivot_longer(c("tiempo.A", "tiempo.B", "tiempo.C"), names_to = "Algoritmo", values_to = "tiempo")
A = filter(A, Algoritmo == "tiempo.A")
B = filter(B, Algoritmo == "tiempo.B")
C = filter(C, Algoritmo == "tiempo.C")
datos_3 = bind_rows(A, B, C)
print(shapiro.test(A$tiempo))
print(shapiro.test(B$tiempo))
print(shapiro.test(C$tiempo))
kruskal.test(tiempo ~ Algoritmo, datos_3)
post_hoc <- pairwise.wilcox.test(datos_3$tiempo, datos_3$Algoritmo,
p.adjust.method = "holm", paired = FALSE)
print(post_hoc)
clear
help("pairwise.wilcox.test")
setwd("/home/diggy/Documents/Universidad/5to Semestre/Taller de Programación/Lab2/Observaciones/")
datos = read.csv("obs2.csv")
View(datos)
setwd("/home/diggy/Documents/Universidad/5to Semestre/Taller de Programación/Lab2/TallerDeProgra_LAB2/")
datos = read.csv("obs2.csv")
View(datos)
help("ggqqplot")
help("qqplot")
library(ggplot2)
library(gridExtra)
library(ggpubr)
help("ggqqplot")
# Plot
ggqqplot(data = datos, datos$tiempoVector)
# Plot
ggqqplot(data = datos, datos$tiempoVector)
# Plot
ggqqplot(data = datos, x = "tiempoVector")
# Plot
ggqqplot(data = datos, x = "tiempoVector")
ggqqplot(data = datos, x = "tiempoMultiset")
shapiro.test(datos$tiempoVector)
source("~/Documents/Universidad/5to Semestre/Taller de Programación/Lab2/Observaciones/estudio.R", echo=TRUE)
# Plot
ggqqplot(data = datos, x = "tiempoVector")
ggqqplot(data = datos, x = "tiempoMultiset")
shapiro.test(datos$tiempoVector)
# Plot
ggqqplot(data = datos, x = "tiempoVector")
ggqqplot(data = datos, x = "tiempoMultiset")
# Plot
ggqqplot(data = datos, x = "tiempoVector")
ggqqplot(data = datos, x = "tiempoMultiset")
# Plot
ggqqplot(data = datos, x = "tiempoVector")
ggqqplot(data = datos, x = "tiempoMultiset")
# Plot
ggqqplot(data = datos, x = "tiempoVector")
# Plot
ggqqplot(data = datos, x = "tiempoVector")
ggqqplot(data = datos, x = "tiempoMultiset")
library(ggplot2)
library(gridExtra)
library(ggpubr)
setwd("/home/diggy/Documents/Universidad/5to Semestre/Taller de Programación/Lab2/TallerDeProgra_LAB2/")
datos = read.csv("obs.csv")
View(datos)
# Plot
ggqqplot(data = datos, x = "tiempoVector")
ggqqplot(data = datos, x = "tiempoMultiset")
# Plot
ggqqplot(data = datos, x = "tiempoVector")
ggqqplot(data = datos, x = "tiempoMultiset")
setwd("/home/diggy/Documents/Universidad/5to Semestre/Taller de Programación/Lab2/TallerDeProgra_LAB2/")
datos = read.csv("obs.csv")
# Plot
ggqqplot(data = datos, x = "tiempoVector")
ggqqplot(data = datos, x = "tiempoMultiset")
# Plot
ggqqplot(data = datos, x = "tiempoVector")
ggqqplot(data = datos, x = "tiempoMultiset")
shapiro.test(datos$tiempoVector)
shapiro.test(datos$tiempoMultiset)
shapiro.test(datos$tiempoVector)
shapiro.test(datos$tiempoMultiset)
# Plot
ggqqplot(data = datos, x = "tiempoVector")
ggqqplot(data = datos, x = "tiempoMultiset")
shapiro.test(datos$tiempoVector)
shapiro.test(datos$tiempoMultiset)
help("shapiro.test")
# Plot
ggqqplot(data = datos, x = "tiempoVector")
ggqqplot(data = datos, x = "tiempoMultiset")
shapiro.test(datos$tiempoVector)
shapiro.test(datos$tiempoMultiset)
help("t.test")
t.test(x = datos$tiempoMultiset, y = datos$tiempoVector, paired = TRUE, mu = 1000, conf.level = 1-0.05, alternative = "greater", var.equal = TRUE)
source("~/Documents/Universidad/5to Semestre/Taller de Programación/Lab2/Observaciones/estudio.R", echo=TRUE)
source("~/Documents/Universidad/5to Semestre/Taller de Programación/Lab2/Observaciones/estudio.R", echo=TRUE)
source("~/Documents/Universidad/5to Semestre/Taller de Programación/Lab2/Observaciones/estudio.R", echo=TRUE)
source("~/Documents/Universidad/5to Semestre/Taller de Programación/Lab2/Observaciones/estudio.R", echo=TRUE)
source("~/Documents/Universidad/5to Semestre/Taller de Programación/Lab2/Observaciones/estudio.R", echo=TRUE)
diferencia <- datos$tiempoVector - datos$tiempoMultiset
help(abs)
diferencia <- abs(datos$tiempoVector - datos$tiempoMultiset)
diferencia <- datos$tiempoVector - datos$tiempoMultiset
resultado = mean(diferencia)
diferencia
